<?php
# This file was automatically generated by the MediaWiki 1.31.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}


## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;
$wgSitename = "The Rock Art Database";
$wgMetaNamespace = "The_Rock_Art_Database";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/GitHub/rockartdatabase_v3/newInstall";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

# Logo Change Path
$wgLogo = $wgScriptPath . '/resources/assets/mediawiki.png';

## The URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo = "$wgResourceBasePath/resources/assets/wiki.png"; // does this need to be here?

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "apache@localhost";
$wgPasswordSender = "apache@localhost";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "my_wiki";
$wgDBuser = "root";
$wgDBpassword = "";

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "C.UTF-8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en-gb";

$wgSecretKey = "f3782d326594977b8eea789696ba05287f86ed5dd21f89b423046f503a598a06";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "699265013155e5c4";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "tweeki";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );


# End of automatically generated settings.
# Add more configuration options below.

# Custom SKin: Tweeki - Bootstrap Layout
wfLoadSkin( 'Tweeki' );

# Extension: Capiunto to create Infobox
wfLoadExtension( 'Capiunto' );

# Extension: CSS to edit CSS front end
wfLoadExtension( 'CSS' );

# Extension: Parser Functions
wfLoadExtension( 'ParserFunctions' );

# Extension: Scribunto
wfLoadExtension( 'Scribunto' );

# Extension: YouTube Embedding
wfLoadExtension( 'YouTube' );


# MediaWiki Standard Extensions----------------------------
wfLoadExtension( 'CategoryTree' );
wfLoadExtension( 'Cite' );
wfLoadExtension( 'CiteThisPage' );
// wfLoadExtension( 'CodeEditor' ); BROKEN INSTALL, NO UPDATES
wfLoadExtension( 'ConfirmEdit' );
wfLoadExtension( 'Gadgets' );
wfLoadExtension( 'ImageMap' );
wfLoadExtension( 'InputBox' );
wfLoadExtension( 'Interwiki' );
wfLoadExtension( 'LocalisationUpdate' );
wfLoadExtension( 'MultimediaViewer' );
wfLoadExtension( 'Nuke' );
// wfLoadExtension( 'OATHAuth' ); DATABASE ERROR
wfLoadExtension( 'PdfHandler' );
wfLoadExtension( 'Poem' );
wfLoadExtension( 'Renameuser' );
wfLoadExtension( 'ReplaceText' );
wfLoadExtension( 'SpamBlacklist' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'TitleBlacklist' );
wfLoadExtension( 'WikiEditor' );
# ----------------------------------------------------------


// # Extension: SemanticMediaWiki
// require_once "$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php";
// enableSemantics( 'yourdomain.com/wiki' );


// # Extension: SemanticMediaWiki and RDFIO
// $smwgShowFactbox = SMW_FACTBOX_NONEMPTY;
// $smwgOWLFullExport = true;


// # Extension: YouTube
// wfLoadExtension( 'YouTube' );

// # Extension: iDisplay
// require_once "$IP/extensions/iDisplay/iDisplay.php";


# Disable anonymous editing
$wgGroupPermissions['*']['edit'] = false;


# Prevent new user registrations except by sysops
$wgGroupPermissions['*']['createaccount'] = false;


# Use own Logo
// $wgLogo = $wgScriptPath . '/img/wiki_logo.png'; THIS CODE CASUSES AN ERROR MESSAGE
		// Warning: OutputPage::transformFilePath: Failed to hash C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall/img/wiki_logo.png [Called from OutputPage::transformFilePath in C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\OutputPage.php at line 3742] in C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\debug\MWDebug.php on line 309

# Maps Extension - Code changed in composer.json
// wfLoadExtension( 'Maps' );
# When active, generates error:
		// Fatal error: Uncaught Exception: C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall/extensions/Maps/extension.json does not exist! in C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\registration\ExtensionRegistry.php:107 Stack trace: #0 C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\GlobalFunctions.php(50): ExtensionRegistry->queue('C:\\xampp\\htdocs...') #1 C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\LocalSettings.php(197): wfLoadExtension('Maps') #2 C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\Setup.php(94): require_once('C:\\xampp\\htdocs...') #3 C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\WebStart.php(88): require_once('C:\\xampp\\htdocs...') #4 C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\index.php(39): require('C:\\xampp\\htdocs...') #5 {main} thrown in C:\xampp\htdocs\GitHub\rockartdatabase_v3\newInstall\includes\registration\ExtensionRegistry.php on line 107
